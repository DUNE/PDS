#!/usr/bin/env python3

import click
import json
import os
from rich.console import Console

from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.config_file import generate_cli_from_schema
from daqconf.core.metadata import write_metadata_file


console = Console()

# Set moo schema search path
from dunedaq.env import get_moo_model_path
import moo.io
moo.io.default_load_path = get_moo_model_path()

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])
@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('daphnemodules/confgen.jsonnet', 'daphne_gen')
@click.option("--host", type=str, default='np04-srv-015', help="host of the Daphne application")
@click.option('-f', '--daphne-file', type=click.Path(exists=True), default=None, help="daphne json with detailed configuration")
@click.argument('json_dir', type=click.Path())

def cli(config,
        host,
        daphne_file,
        json_dir):

    if os.path.exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    config_data = config[0]
    config_file = config[1]

    # Get our config objects
    # Loading this one another time... (first time in config_file.generate_cli_from_schema)    

    moo.otypes.load_types('daqconf/bootgen.jsonnet')
    import dunedaq.daqconf.bootgen as bootgen
    moo.otypes.load_types('daphnemodules/confgen.jsonnet')
    import dunedaq.daphnemodules.confgen as daphnegen
    
    console.log(f"\nIndividual configuration records before any command line overrides: ")    

    boot = bootgen.boot(**config_data.boot)
    console.log(f"boot configuration object: {boot.pod()}")

    daphne_block = daphnegen.DaphneInput(**config_data.daphne)
    console.log(f"daphnemodules configuration object: {daphne_block.pod()}")

#    console.log(f"\nIndividual configuration records after any command line overrides: ")
#    console.log(f"boot configuration object: {boot.pod()}")
#    console.log(f"daphnemodules configuration object: {daphne_block.pod()}")	

    console.log("Loading daphnemodulesapp config generator")
    from daphnemodules import daphnemodulesapp_gen

    the_system = System()

    the_system.apps["daphneapp"] = daphnemodulesapp_gen.get_daphnemodules_app(
        host=host,
        nickname = "controller",
        slots = daphne_block.slots,
        biasctrl = daphne_block.biasctrl,
        afe_gain = daphne_block.afe_gain,
        channel_gain = daphne_block.channel_gain,
        channel_offset = daphne_block.channel_offset,
        adc = daphne_block.adc,
        pga = daphne_block.pga,
        lna = daphne_block.lna,
        map_file = daphne_file
    )

    ####################################################################                                  
    # Application command data generation                                                                 
    ####################################################################                                  

    # Arrange per-app command data into the format used by util.write_json_files()    

    app_command_datas = {
        name : make_app_command_data(the_system, app, name)
        for name, app in the_system.apps.items()
    }

    # Make boot.json config                                                                               
    from daqconf.core.conf_utils import make_system_command_datas, write_json_files
    system_command_datas = make_system_command_datas(boot, the_system, verbose = False)

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    from daphnemodules.dump_buffer_command_gen import generate_daphne_rc_cmds
    directory = daphne_block.dump_buffers_directory
    n_samples = daphne_block.dump_buffers_n_samples
    console.log(f"dump_buffer command generated and will dump in the {directory} directory, dumping {n_samples} n_samples")
    generate_daphne_rc_cmds(directory, n_samples, "daphneapp", json_dir)
    
    console.log(f"daphnemodules app config generated in {json_dir}")

    write_metadata_file(json_dir, "daphnemodules_gen", config_file)


if __name__ == "__main__":
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception:
        console.print_exception()
