#!/usr/bin/env python3

import subprocess
import sys

# Define the location of the OKS file
OKS_FILE = "ehn1-daqconfigs/segments/np02-pds.data.xml"

# Define the drunc-unified-shell command
DRUNC_CMD = (
    "drunc-unified-shell ssh-standalone "
    "ehn1-daqconfigs/sessions/np02-session.data.xml np02-session "
    "boot conf start enable-triggers change-rate 2. wait 4 "
    "disable-triggers drain-dataflow stop-trigger-sources stop scrap terminate"
)

# Define the web proxy sourcing command
WEB_PROXY_CMD = "source ~np04daq/bin/web_proxy.sh -u"

def source_web_proxy():
    """
    Sources the web proxy script at the beginning of execution.
    """
    print("\n=== Sourcing web_proxy.sh ===")
    result = subprocess.call(f"bash -c '{WEB_PROXY_CMD}'", shell=True)
    if result != 0:
        print("\nError: Failed to source web_proxy.sh")
        sys.exit(1)

def run_set_ssp_conf(oksfile, **kwargs):
    """
    Runs the set_ssp_conf script with the provided arguments.
    
    Args:
        oksfile (str): The required OKS file argument.
        **kwargs: Optional named arguments to pass as CLI options.
    """
    cmd = ["set_ssp_conf", oksfile]  # Base command
    
    # Add optional arguments if provided
    for key, value in kwargs.items():
        if value is not None:
            option = f"--{key.replace('_', '-')}"  # Convert Python-style names to CLI format
            cmd.append(option)
            cmd.append(str(value))

    try:
        result = subprocess.run(cmd, check=True, text=True, capture_output=True)
        print(f"\n=== Running set_ssp_conf with channel_mask={kwargs.get('channel_mask')} ===")
        print("Output:\n", result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"\nError running set_ssp_conf with channel_mask={kwargs.get('channel_mask')}:")
        print("stderr:", e.stderr)
        sys.exit(1)

def run_drunc_command():
    """
    Runs the drunc-unified-shell command.
    """
    print("\n=== Running drunc-unified-shell sequence ===")
    result = subprocess.call(DRUNC_CMD, shell=True)
    if result != 0:
        print("\nError: drunc-unified-shell command failed.")
        sys.exit(1)

if __name__ == "__main__":
    # Source web_proxy.sh once at the beginning
    source_web_proxy()

    channel_mask_values = [1]  # Values to iterate over

    for mask in channel_mask_values:
        # Run set_ssp_conf
        run_set_ssp_conf(
            oksfile=OKS_FILE,
            object_name="np02-ssp-on",
            number_channels=12,
            channel_mask=mask,
            pulse_mode="single",
            burst_count=1,
            double_pulse_delay_ticks=0,
            pulse1_width_ticks=5,
            pulse2_width_ticks=0,
            pulse_bias_percent_270nm=4000,
            pulse_bias_percent_367nm=0
        )

        # Run drunc-unified-shell command after each iteration
        run_drunc_command()